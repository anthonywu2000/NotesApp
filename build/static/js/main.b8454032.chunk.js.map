{"version":3,"sources":["components/Main.js","components/Sidebar.js","App.js","index.js"],"names":["Main","activeNote","updateNote","editNote","key","value","Date","now","className","type","id","noteTitle","onChange","e","target","autoFocus","placeholder","noteBody","Sidebar","notes","addNotes","deleteNotes","setActiveNote","sortedNotes","sort","x","y","noteLastModified","onClick","map","note","noteID","slice","toLocaleDateString","weekday","year","month","day","hour","minute","second","App","useState","localStorage","JSON","parse","getItem","setNotes","ith","setIth","useEffect","setItem","stringify","newNote","uuid","idDelete","length","filter","find","updatedNote","updatedNotesArray","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNA0CeA,MAxCf,YAA2C,IAA3BC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,WAGxB,SAASC,EAASC,EAAKC,GAAQ,IAAD,EAC1BH,EAAW,2BACJD,GADG,uBAELG,EAAMC,GAFD,iCAGYC,KAAKC,OAHjB,KAOd,OAAO,sBAAKC,UAAY,WAAjB,UACH,sBAAKA,UAAY,qBAAjB,UACI,uBACIC,KAAO,OACPC,GAAK,QACLL,MAASJ,EAAaA,EAAWU,UAAY,GAC7CC,SAAY,SAACC,GAAD,OAAOV,EAAS,YAAaU,EAAEC,OAAOT,QAClDU,WAAS,IAEb,0BACIL,GAAK,OACLM,YAAc,2BACdX,MAASJ,EAAaA,EAAWgB,SAAW,GAC5CL,SAAY,SAACC,GAAD,OAAOV,EAAS,WAAYU,EAAEC,OAAOT,aAKzD,sBAAKG,UAAY,wBAAjB,UACI,qBAAKA,UAAY,gBAAjB,SACI,6BAAKP,EAAaA,EAAWU,UAAY,OAE7C,cAAC,IAAD,CAAeH,UAAY,mBAA3B,SACKP,EAAaA,EAAWgB,SAAW,YCKrCC,MAzCf,YAA+E,IAA5DC,EAA2D,EAA3DA,MAAOC,EAAoD,EAApDA,SAAUC,EAA0C,EAA1CA,YAAapB,EAA6B,EAA7BA,WAAYqB,EAAiB,EAAjBA,cAErDC,EAAcJ,EAAMK,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEC,iBAAmBF,EAAEE,oBAE9D,OAAO,sBAAKnB,UAAY,cAAjB,UACH,sBAAKA,UAAY,qBAAjB,UACI,uCACA,wBAAQoB,QAAWR,EAAnB,iBAFJ,OAMA,qBAAKZ,UAAY,oBAAjB,SAGKe,EAAYM,KAAI,SAACC,GAAD,OACb,sBACItB,UAAS,2BAAwBsB,EAAKC,SAAW9B,GAAc,UAC/D2B,QAAS,kBAAMN,EAAcQ,EAAKC,SAFtC,UAGI,sBAAKvB,UAAY,qBAAjB,UACI,iCAASsB,EAAKnB,YACd,wBAAQiB,QAAW,kBAAMP,EAAYS,EAAKC,SAA1C,uBAGJ,4BAAID,EAAKb,UAAYa,EAAKb,SAASe,MAAM,EAAG,KAAO,QACnD,wBAAOxB,UAAY,YAAnB,2BAA8C,IAAIF,KAAKwB,EAAKH,kBACvDM,mBAAmB,QAAS,CACzBC,QAAS,OACTC,KAAM,UACNC,MAAO,UACPC,IAAK,UACLC,KAAM,UACNC,OAAQ,UACRC,OAAQ,2B,iBCiDrBC,MA1Ef,WAAe,MAGeC,mBAASC,aAAaxB,MAAQyB,KAAKC,MAAMF,aAAaG,QAAQ,UAAY,IAHzF,mBAGJ3B,EAHI,KAGG4B,EAHH,OAISL,mBAAS,GAJlB,mBAINM,EAJM,KAIDC,EAJC,OAKyBP,oBAAS,GALlC,mBAKJzC,EALI,KAKQqB,EALR,KAyDX,OAjDA4B,qBAAU,WACNP,aAAaQ,QAAQ,QAASP,KAAKQ,UAAUjC,OAiD/C,sBAAKX,UAAU,MAAf,UACE,cAAC,EAAD,CACIW,MAASA,EACTC,SAhDR,WACI,IAAMiC,EAAU,CACZtB,OAAQuB,MACR3C,UAAW,iBAAmBqC,EAC9B/B,SAAU,GACVU,iBAAkBrB,KAAKC,OAI3BwC,EAAS,CAACM,GAAF,mBAAclC,KAEtB8B,EAAOD,GAAO,GACd1B,EAAc+B,EAAQtB,SAqClBV,YAlCR,SAAqBkC,GACbA,IAAapC,EAAM,GAAGY,QAA2B,IAAjBZ,EAAMqC,QACtCP,EAAOD,EAAM,GACbD,EAAS5B,EAAMsC,QAAO,SAAC3B,GAAD,OAAUA,EAAKC,SAAWwB,OACzCA,IAAapC,EAAM,GAAGY,QAC7BkB,EAAOD,GAAO,GACdD,EAAS5B,EAAMsC,QAAO,SAAC3B,GAAD,OAAUA,EAAKC,SAAWwB,OAEhDR,EAAS5B,EAAMsC,QAAO,SAAC3B,GAAD,OAAUA,EAAKC,SAAWwB,OA2BhDtD,WAAcA,EACdqB,cAAiBA,IAErB,cAAC,EAAD,CACIrB,WAzBGkB,EAAMuC,MAAK,SAAC5B,GAAD,OAAUA,EAAKC,SAAW9B,KA0BxCC,WAtBR,SAAoByD,GAChB,IAAMC,EAAoBzC,EAAMU,KAAI,SAACC,GACjC,OAAIA,EAAKC,SAAW4B,EAAY5B,OACrB4B,EAEJ7B,KAGXiB,EAASa,UCzDjBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.b8454032.chunk.js","sourcesContent":["import ReactMarkdown from \"react-markdown\";\n\nfunction Main({ activeNote, updateNote }) { // the activeNote object with 4 properties\n    // activeNote is the note object! (see function in App)\n\n    function editNote(key, value) {\n        updateNote({\n            ...activeNote, // keep what is unchanged in the activeNote object\n            [key]: value, // change the values of the keys that are specified in the\n            noteLastModified: Date.now(),\n        });\n    }\n\n    return <div className = \"app-main\">\n        <div className = \"app-main-note-edit\">\n            <input\n                type = \"text\"\n                id = \"title\"\n                value = {activeNote ? activeNote.noteTitle : \"\"}\n                onChange = {(e) => editNote(\"noteTitle\", e.target.value)} // change the noteTitle to what is in the input field DOM\n                autoFocus\n            />\n            <textarea\n                id = \"body\"\n                placeholder = \"Input your text here....\"\n                value = {activeNote ? activeNote.noteBody : \"\"}\n                onChange = {(e) => editNote(\"noteBody\", e.target.value)} // change the noteBody to what is in the input field DOM\n            />\n        </div>\n\n        {/* Check this: https://stackoverflow.com/questions/62730044/uncaught-typeerror-cannot-read-property-username-of-undefined */}\n        <div className = \"app-main-note-preview\">\n            <div className = \"preview-title\">\n                <h1>{activeNote ? activeNote.noteTitle : \"\"}</h1>\n            </div>\n            <ReactMarkdown className = \"markdown-preview\">\n                {activeNote ? activeNote.noteBody : \"\"}\n            </ReactMarkdown>\n        </div>\n    </div>;\n}\n\nexport default Main;","function Sidebar({ notes, addNotes, deleteNotes, activeNote, setActiveNote }) {\n\n    let sortedNotes = notes.sort((x, y) => y.noteLastModified - x.noteLastModified); // sort from most recent to the oldest modified nopte\n\n    return <div className = \"app-sidebar\">\n        <div className = \"app-sidebar-header\">\n            <h1>NOTES</h1>\n            <button onClick = {addNotes}>ADD</button> {/* adding a note to list of notes */}\n        </div>\n\n        {/* Notes being looped through to create individual note via map function */}\n        <div className = \"app-sidebar-notes\">\n            {/* If the selected note is the same as the current activeNote, then we highlight the note in blue (active)\n             activeNote is treated as the ID of currently selected note*/}\n            {sortedNotes.map((note) => (\n                <div\n                    className = {`app-sidebar-note ${note.noteID === activeNote && \"active\"}`}\n                    onClick={() => setActiveNote(note.noteID)}>\n                    <div className = \"sidebar-note-title\">\n                        <strong>{note.noteTitle}</strong>\n                        <button onClick = {() => deleteNotes(note.noteID)}>DELETE</button>\n                    </div>\n                    {/* If the notes' body is not empty, then display the first 120 characters with ... */}\n                    <p>{note.noteBody && note.noteBody.slice(0, 121) + \"...\"}</p>\n                    <small className = \"note-meta\">Last Modified {new Date(note.noteLastModified)\n                        .toLocaleDateString(\"en-US\", {\n                            weekday: \"long\",\n                            year: \"numeric\",\n                            month: \"numeric\",\n                            day: \"numeric\",\n                            hour: \"2-digit\",\n                            minute: \"2-digit\",\n                            second: \"2-digit\",\n                        })}</small>\n                </div>\n            ))}\n\n        </div>\n    </div>\n}\n\nexport default Sidebar;","import './App.css';\nimport Main from \"./components/Main\";\nimport Sidebar from \"./components/Sidebar\";\nimport {useState, useEffect} from 'react';\nimport uuid from \"react-uuid\";\n\n// these are data that are shared between Sidebar and Main\nfunction App() {\n\n    // initial state will be the notes from previous entry OR empty notes if there is no previous entry\n    const [notes, setNotes] = useState(localStorage.notes ? JSON.parse(localStorage.getItem(\"notes\")) : []); // list of notes that can appear in the sidebar (both components need to access it)\n    let [ith, setIth] = useState(1); // keep track the untitled note number starting from 1\n    const [activeNote, setActiveNote] = useState(false); // note that is being selected for view and edit on Main\n\n    // we want to store the list of notes that are kept into a string of notes via localStorage (side effects)\n    useEffect(() => {\n        localStorage.setItem(\"notes\", JSON.stringify(notes));\n    });\n\n    // a note consists of these 4 things\n    function addNotes() {\n        const newNote = {\n            noteID: uuid(),\n            noteTitle: \"Untitled Note \" + ith,\n            noteBody: \"\",\n            noteLastModified: Date.now(),\n        };\n\n        // add a newNote onto the list of notes\n        setNotes([newNote, ...notes]);\n        // update index\n        setIth(ith += 1);\n        setActiveNote(newNote.noteID);\n    }\n\n    function deleteNotes(idDelete) {\n        if (idDelete === notes[0].noteID && notes.length === 1) { // delete the final note in the list, then refresh the indexing\n            setIth(ith = 1);\n            setNotes(notes.filter((note) => note.noteID !== idDelete));\n        } else if (idDelete === notes[0].noteID) {\n            setIth(ith -= 1);\n            setNotes(notes.filter((note) => note.noteID !== idDelete));\n        } else {\n            setNotes(notes.filter((note) => note.noteID !== idDelete));\n        }\n    }\n\n    // helper function as a prop in order for Main to display all the details of the selected note in preview\n    function getActiveNote() {\n        return notes.find((note) => note.noteID === activeNote) // this is a note object returned\n    }\n\n    // update the note array with the whole new array that has the specific note updated with the current input text values\n    function updateNote(updatedNote) {\n        const updatedNotesArray = notes.map((note) => {\n            if (note.noteID === updatedNote.noteID) {\n                return updatedNote;\n            }\n            return note;\n        });\n\n        setNotes(updatedNotesArray);\n    }\n\n    return (\n      <div className=\"App\">\n        <Sidebar\n            notes = {notes}\n            addNotes = {addNotes}\n            deleteNotes = {deleteNotes}\n            activeNote = {activeNote}\n            setActiveNote = {setActiveNote}\n        />\n        <Main\n            activeNote={getActiveNote()}\n            updateNote={updateNote}\n        />\n      </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}